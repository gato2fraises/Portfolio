/**
 * Gestionnaire de th√®mes pour le portfolio
 * G√®re les th√®mes clair/sombre et les transitions
 */

import type { Theme } from '../types/index.js';
import { Logger } from './logger.js';

export class ThemeManager {
  private currentTheme: Theme;
  private systemTheme: 'light' | 'dark' = 'light';

  constructor(initialTheme: Theme = 'auto') {
    this.currentTheme = initialTheme;
  }

  /**
   * Initialise le gestionnaire de th√®mes
   */
  async init(): Promise<void> {
    Logger.info('üé® Initialisation du gestionnaire de th√®mes');

    // D√©tecter le th√®me syst√®me
    this.detectSystemTheme();

    // Appliquer le th√®me initial
    this.applyTheme();

    // √âcouter les changements de th√®me syst√®me
    this.watchSystemTheme();

    Logger.debug('‚úÖ Gestionnaire de th√®mes initialis√©');
  }

  /**
   * D√©finit le th√®me actuel
   */
  setTheme(theme: Theme): void {
    const oldTheme = this.currentTheme;
    this.currentTheme = theme;

    if (oldTheme !== theme) {
      this.applyTheme();
      this.dispatchThemeChange(theme);
      Logger.debug(`üé® Th√®me chang√©: ${oldTheme} ‚Üí ${theme}`);
    }
  }

  /**
   * Obtient le th√®me actuel
   */
  getCurrentTheme(): Theme {
    return this.currentTheme;
  }

  /**
   * Obtient le th√®me effectif (r√©sout 'auto')
   */
  getEffectiveTheme(): 'light' | 'dark' {
    if (this.currentTheme === 'auto') {
      return this.systemTheme;
    }
    return this.currentTheme;
  }

  /**
   * Bascule entre les th√®mes
   */
  toggleTheme(): void {
    const currentEffective = this.getEffectiveTheme();
    const newTheme: Theme = currentEffective === 'light' ? 'dark' : 'light';
    this.setTheme(newTheme);
  }

  /**
   * D√©tecte le th√®me syst√®me
   */
  private detectSystemTheme(): void {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    this.systemTheme = mediaQuery.matches ? 'dark' : 'light';
    Logger.debug(`üñ•Ô∏è Th√®me syst√®me d√©tect√©: ${this.systemTheme}`);
  }

  /**
   * Surveille les changements de th√®me syst√®me
   */
  private watchSystemTheme(): void {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    
    mediaQuery.addEventListener('change', (e) => {
      this.systemTheme = e.matches ? 'dark' : 'light';
      Logger.debug(`üñ•Ô∏è Changement de th√®me syst√®me: ${this.systemTheme}`);
      
      // Si on est en mode auto, appliquer le nouveau th√®me
      if (this.currentTheme === 'auto') {
        this.applyTheme();
        this.dispatchThemeChange('auto');
      }
    });
  }

  /**
   * Applique le th√®me au DOM
   */
  private applyTheme(): void {
    const effectiveTheme = this.getEffectiveTheme();
    const root = document.documentElement;

    // Enlever les anciennes classes de th√®me
    root.classList.remove('theme-light', 'theme-dark');
    
    // Ajouter la nouvelle classe de th√®me
    root.classList.add(`theme-${effectiveTheme}`);

    // Mettre √† jour l'attribut data-theme pour les s√©lecteurs CSS
    root.setAttribute('data-theme', effectiveTheme);

    // Mettre √† jour la couleur du th√®me dans le meta tag
    this.updateThemeColorMeta(effectiveTheme);

    Logger.debug(`üé® Th√®me appliqu√©: ${effectiveTheme}`);
  }

  /**
   * Met √† jour la couleur du th√®me dans le meta tag
   */
  private updateThemeColorMeta(theme: 'light' | 'dark'): void {
    let metaThemeColor = document.querySelector('meta[name="theme-color"]');
    
    if (!metaThemeColor) {
      metaThemeColor = document.createElement('meta');
      metaThemeColor.setAttribute('name', 'theme-color');
      document.head.appendChild(metaThemeColor);
    }

    // Couleurs pour les th√®mes
    const colors = {
      light: '#ffffff',
      dark: '#1a1a1a'
    };

    metaThemeColor.setAttribute('content', colors[theme]);
  }

  /**
   * Dispatche un √©v√©nement de changement de th√®me
   */
  private dispatchThemeChange(theme: Theme): void {
    const event = new CustomEvent('theme-change', {
      detail: { theme },
      bubbles: true
    });
    
    document.dispatchEvent(event);
  }

  /**
   * Sauvegarde le th√®me dans localStorage
   */
  saveTheme(): void {
    try {
      localStorage.setItem('portfolio-theme', this.currentTheme);
      Logger.debug('üíæ Th√®me sauvegard√©');
    } catch (error) {
      Logger.warn('‚ö†Ô∏è Erreur lors de la sauvegarde du th√®me:', error);
    }
  }

  /**
   * Charge le th√®me depuis localStorage
   */
  loadTheme(): Theme {
    try {
      const saved = localStorage.getItem('portfolio-theme');
      if (saved && ['light', 'dark', 'auto'].includes(saved)) {
        Logger.debug('üì± Th√®me charg√© depuis localStorage:', saved);
        return saved as Theme;
      }
    } catch (error) {
      Logger.warn('‚ö†Ô∏è Erreur lors du chargement du th√®me:', error);
    }
    
    return 'auto';
  }
}