# 🚀 Portfolio CI/CD Pipeline
# Pipeline automatisé pour build, test et déploiement
name: Portfolio CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Variables d'environnement
env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # 🔍 Analyse de code et linting
  lint-and-format:
    name: 📝 Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🔍 Type checking
        run: npm run type-check

      - name: 🧹 Lint code
        run: npm run lint

      - name: 💄 Check formatting
        run: npm run format:check

  # 🧪 Tests unitaires
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📋 Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

  # 🎭 Tests E2E avec Playwright
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}

      - name: 📁 Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

  # 🏗️ Build et vérification
  build:
    name: 🏗️ Build & Verify
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📏 Check bundle size
        run: |
          echo "📊 Build size analysis:"
          du -sh dist/
          du -sh dist/assets/

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

  # 🔒 Audit de sécurité
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 Audit dependencies
        run: npm audit --audit-level=moderate

      - name: 🔒 Check for known vulnerabilities
        run: npx audit-ci --moderate

  # 🚀 Déploiement automatique
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
    
    # Permissions pour GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📄 Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: 📦 Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📋 Deployment summary
        run: |
          echo "🎉 Deployment successful!"
          echo "🔗 Site URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "📊 Deployment ID: ${{ steps.deployment.outputs.page_url }}"

  # 📊 Rapport de performance
  performance-audit:
    name: 📊 Performance Audit
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 🧹 Nettoyage
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, performance-audit]
    if: always()
    steps:
      - name: 🗑️ Clean up artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            dist-files
            playwright-report-*
          failOnError: false

# 📊 Notifications et rapports
  success-notification:
    name: ✅ Success Notification
    if: success()
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: ✅ Success notification
        run: |
          echo "🎉 Pipeline completed successfully!"
          echo "✅ All tests passed"
          echo "🚀 Application deployed"
          echo "📊 Performance audit completed"

  failure-notification:
    name: ❌ Failure Notification
    if: failure()
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, e2e-tests, build, security-audit, deploy]
    steps:
      - name: ❌ Failure notification
        run: |
          echo "❌ Pipeline failed!"
          echo "🔍 Check the logs for details"
          echo "🛠️ Please fix the issues and try again"